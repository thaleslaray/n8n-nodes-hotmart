name: CI - Integração Contínua

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

jobs:
  # Job 1: Verificação de Qualidade
  quality:
    name: 🔍 Qualidade de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history para análises
    
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: 📦 Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 💾 Cache de dependências
      uses: actions/cache@v3
      with:
        path: |
          ~/.pnpm-store
          **/node_modules
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-
          
    - name: 📦 Instalar dependências
      run: pnpm install --frozen-lockfile
      
    - name: 🎨 Verificar formatação (Lint)
      run: pnpm lint
      
    - name: 📝 Verificar tipos TypeScript
      run: pnpm typecheck
      
    - name: 🔨 Compilar projeto
      run: pnpm build
      
    - name: 📊 Verificar tamanho do bundle
      run: |
        echo "📦 Tamanho do build:"
        du -sh dist/
        find dist -name "*.js" -exec ls -lh {} \; | awk '{print $5, $9}'

  # Job 2: Testes
  test:
    name: 🧪 Testes
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🔧 Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        
    - name: 📦 Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 💾 Cache de dependências
      uses: actions/cache@v3
      with:
        path: |
          ~/.pnpm-store
          **/node_modules
        key: ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        
    - name: 📦 Instalar dependências
      run: pnpm install --frozen-lockfile
      
    - name: 🧪 Executar testes
      run: pnpm test:ci
      env:
        CI: true
        
    - name: 📊 Gerar relatório de cobertura
      if: matrix.node-version == '18.x'  # Apenas uma vez
      run: pnpm test:coverage
      
    - name: 📈 Upload cobertura para Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: n8n-nodes-hotmart
        fail_ci_if_error: false
        
    - name: 💾 Armazenar relatórios de teste
      if: always() && matrix.node-version == '18.x'
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: |
          coverage/
          test-report-*.json
        retention-days: 7

  # Job 3: Segurança
  security:
    name: 🔒 Verificação de Segurança
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: 📦 Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 🔍 Audit de dependências
      run: pnpm audit --production
      continue-on-error: true  # Não falhar o CI, apenas reportar
      
    - name: 🛡️ Verificar vulnerabilidades com Snyk
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Job 4: Análise de Código
  analyze:
    name: 📊 Análise de Código
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: 📦 Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 📦 Instalar dependências
      run: pnpm install --frozen-lockfile
      
    - name: 🔍 SonarCloud Scan
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: 📏 Verificar complexidade do código
      run: |
        echo "📊 Análise de complexidade:"
        npx complexity-report-cli nodes/ --format json > complexity-report.json || true
        
    - name: 🚨 Comentar no PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## 📊 Relatório de Análise\n\n';
          
          // Adicionar métricas básicas
          comment += '### ✅ Verificações Passadas\n';
          comment += '- Lint ✓\n';
          comment += '- TypeScript ✓\n';
          comment += '- Build ✓\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Job 5: Release (apenas no main)
  release-check:
    name: 🚀 Verificar Release
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: 📦 Instalar pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: 📦 Instalar dependências
      run: pnpm install --frozen-lockfile
      
    - name: 🏷️ Verificar necessidade de release
      id: check
      run: |
        # Verificar se há commits de feat ou fix desde a última tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep -E "^(feat|fix):" | wc -l)
        
        if [ "$COMMITS" -gt 0 ]; then
          echo "needs_release=true" >> $GITHUB_OUTPUT
          echo "📦 Nova release necessária! ($COMMITS commits de feat/fix)"
        else
          echo "needs_release=false" >> $GITHUB_OUTPUT
          echo "✅ Nenhuma mudança requer release"
        fi
        
    - name: 📋 Gerar CHANGELOG preview
      if: steps.check.outputs.needs_release == 'true'
      run: |
        echo "📝 Preview do CHANGELOG:"
        npx conventional-changelog-cli -p angular -i CHANGELOG.md -s --dry-run

  # Job 6: Notificação de Status
  notify:
    name: 📢 Notificar Status
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    if: always()
    
    steps:
    - name: 📊 Resumo do CI
      run: |
        echo "## 📊 Resumo da Build"
        echo ""
        echo "- Quality: ${{ needs.quality.result }}"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo ""
        
        if [ "${{ needs.quality.result }}" == "success" ] && \
           [ "${{ needs.test.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ **Build bem-sucedida!**"
        else
          echo "❌ **Build falhou!**"
          exit 1
        fi