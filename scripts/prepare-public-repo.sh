#!/bin/bash

echo "üîí Preparando reposit√≥rio para compartilhamento p√∫blico..."

# Lista de arquivos sens√≠veis para remover
SENSITIVE_FILES=(
    "CLAUDE.md"
    "PLANO-*.md"
    "RELATORIO-*.md"
    "RFC-*.md"
    "NPM-PUBLISH-GUIDE.md"
    "BACKUP-GUIDE.md"
    "lint.txt"
    "test.txt"
    "backups/"
    "logs/"
)

# Criar branch p√∫blico se n√£o existir
CURRENT_BRANCH=$(git branch --show-current)
echo "üìå Branch atual: $CURRENT_BRANCH"

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Erro: H√° mudan√ßas n√£o commitadas. Fa√ßa commit ou stash primeiro."
    exit 1
fi

# Criar ou mudar para branch p√∫blico
if git show-ref --verify --quiet refs/heads/public; then
    echo "üîÑ Mudando para branch 'public' existente..."
    git checkout public
    git merge $CURRENT_BRANCH --no-edit
else
    echo "üÜï Criando novo branch 'public'..."
    git checkout -b public
fi

# Remover arquivos sens√≠veis
echo "üóëÔ∏è  Removendo arquivos sens√≠veis..."
for file in "${SENSITIVE_FILES[@]}"; do
    if [ -e "$file" ]; then
        git rm -rf "$file" 2>/dev/null || rm -rf "$file"
        echo "   ‚ùå Removido: $file"
    fi
done

# Usar .gitinclude como .gitignore (estrat√©gia whitelist)
cp .gitinclude .gitignore
git add .gitignore

# Commit das mudan√ßas
if ! git diff --staged --quiet; then
    git commit -m "chore: prepare for public sharing"
    echo "‚úÖ Arquivos sens√≠veis removidos e .gitignore p√∫blico aplicado"
else
    echo "‚ÑπÔ∏è  Nenhuma mudan√ßa necess√°ria"
fi

echo ""
echo "üìã Pr√≥ximos passos:"
echo "1. Revise o branch 'public' para garantir que est√° tudo ok"
echo "2. Use 'git push origin public' para enviar ao reposit√≥rio p√∫blico"
echo "3. Para voltar ao desenvolvimento: 'git checkout $CURRENT_BRANCH'"