{
  "name": "Template - Tratamento de Erros Hotmart",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "In√≠cio",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "product",
        "operation": "getAll",
        "returnAll": false,
        "limit": 10
      },
      "id": "hotmart-operation",
      "name": "Opera√ß√£o Hotmart (Exemplo)",
      "type": "@thaleslaray/n8n-nodes-hotmart.hotmart",
      "typeVersion": 1,
      "position": [460, 300],
      "credentials": {
        "hotmartOAuth2Api": {
          "id": "1",
          "name": "Hotmart OAuth2"
        }
      },
      "continueOnFail": true,
      "notes": "continueOnFail: true\n\nPermite que o workflow continue\nmesmo se esta opera√ß√£o falhar.\n\nO erro ser√° capturado no pr√≥ximo n√≥."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-error",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-error-node",
      "name": "Verificar se Houve Erro",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "Verifica se o n√≥ anterior\nretornou um erro.\n\nSe sim: Trata o erro\nSe n√£o: Continua normalmente"
    },
    {
      "parameters": {
        "jsCode": "// Analisar o erro\nconst error = $json.error;\nconst errorDetails = {\n  // Timestamp\n  occurredAt: new Date().toISOString(),\n  \n  // Informa√ß√µes do erro\n  errorMessage: error.message || 'Erro desconhecido',\n  errorCode: error.code || 'UNKNOWN',\n  httpStatus: error.httpCode || null,\n  \n  // Contexto\n  nodeName: error.node?.name || 'Hotmart Operation',\n  nodeType: error.node?.type || 'hotmart',\n  \n  // Classifica√ß√£o do erro\n  errorType: classifyError(error),\n  severity: getSeverity(error),\n  \n  // A√ß√µes recomendadas\n  recommendedActions: getRecommendedActions(error),\n  \n  // Deve tentar novamente?\n  shouldRetry: shouldRetryError(error),\n  \n  // Dados originais\n  originalError: error\n};\n\n// Fun√ß√µes auxiliares\nfunction classifyError(error) {\n  const httpCode = parseInt(error.httpCode) || 0;\n  \n  if (httpCode === 401) return 'AUTHENTICATION_ERROR';\n  if (httpCode === 403) return 'AUTHORIZATION_ERROR';\n  if (httpCode === 404) return 'NOT_FOUND';\n  if (httpCode === 429) return 'RATE_LIMIT';\n  if (httpCode >= 500) return 'SERVER_ERROR';\n  if (httpCode >= 400) return 'CLIENT_ERROR';\n  \n  if (error.message?.includes('ECONNREFUSED')) return 'CONNECTION_ERROR';\n  if (error.message?.includes('ETIMEDOUT')) return 'TIMEOUT_ERROR';\n  \n  return 'UNKNOWN_ERROR';\n}\n\nfunction getSeverity(error) {\n  const type = classifyError(error);\n  \n  if (['SERVER_ERROR', 'CONNECTION_ERROR'].includes(type)) return 'HIGH';\n  if (['AUTHENTICATION_ERROR', 'RATE_LIMIT'].includes(type)) return 'MEDIUM';\n  if (['NOT_FOUND', 'CLIENT_ERROR'].includes(type)) return 'LOW';\n  \n  return 'MEDIUM';\n}\n\nfunction getRecommendedActions(error) {\n  const type = classifyError(error);\n  const actions = [];\n  \n  switch(type) {\n    case 'AUTHENTICATION_ERROR':\n      actions.push('Verificar credenciais OAuth2');\n      actions.push('Renovar token de acesso');\n      actions.push('Verificar se a aplica√ß√£o est√° ativa na Hotmart');\n      break;\n      \n    case 'RATE_LIMIT':\n      actions.push('Aguardar antes de tentar novamente');\n      actions.push('Implementar backoff exponencial');\n      actions.push('Verificar limites da API');\n      break;\n      \n    case 'SERVER_ERROR':\n      actions.push('Aguardar alguns minutos');\n      actions.push('Verificar status da API Hotmart');\n      actions.push('Tentar novamente com backoff');\n      break;\n      \n    case 'NOT_FOUND':\n      actions.push('Verificar se o recurso existe');\n      actions.push('Validar IDs e par√¢metros');\n      break;\n      \n    default:\n      actions.push('Verificar logs detalhados');\n      actions.push('Contatar suporte se persistir');\n  }\n  \n  return actions;\n}\n\nfunction shouldRetryError(error) {\n  const type = classifyError(error);\n  const retryableTypes = ['SERVER_ERROR', 'CONNECTION_ERROR', 'TIMEOUT_ERROR', 'RATE_LIMIT'];\n  \n  return retryableTypes.includes(type);\n}\n\nreturn {\n  json: errorDetails\n};"
      },
      "id": "analyze-error",
      "name": "Analisar e Classificar Erro",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 200],
      "notes": "An√°lise inteligente do erro:\n\n1. Classifica√ß√£o:\n   - Tipo de erro\n   - Severidade\n   - Se deve tentar novamente\n\n2. Contexto:\n   - Quando ocorreu\n   - Em qual opera√ß√£o\n   - C√≥digo HTTP\n\n3. Recomenda√ß√µes:\n   - A√ß√µes sugeridas\n   - Baseadas no tipo de erro"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-retry",
              "leftValue": "={{ $json.shouldRetry }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "should-retry-check",
      "name": "Deve Tentar Novamente?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "duration": 5,
        "unit": "seconds"
      },
      "id": "wait-before-retry",
      "name": "Aguardar 5 Segundos",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1340, 100],
      "notes": "Aguarda antes de tentar novamente.\n\nPara rate limit, considere\naumentar o tempo de espera."
    },
    {
      "parameters": {
        "content": "## üö® Erro na Opera√ß√£o Hotmart\n\n**Tipo**: {{ $json.errorType }}  \n**Severidade**: {{ $json.severity }}  \n**Mensagem**: {{ $json.errorMessage }}  \n**C√≥digo HTTP**: {{ $json.httpStatus || 'N/A' }}  \n\n### üìç Contexto\n- **Hor√°rio**: {{ $json.occurredAt }}  \n- **Opera√ß√£o**: {{ $json.nodeName }}  \n\n### üí° A√ß√µes Recomendadas\n{{#each recommendedActions}}\n- {{ this }}\n{{/each}}\n\n### üîÑ Retry\n**Tentar novamente**: {{ $json.shouldRetry ? 'Sim' : 'N√£o' }}",
        "convertMarkdown": true
      },
      "id": "format-error-message",
      "name": "Formatar Mensagem de Erro",
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [1340, 300],
      "notes": "Formata erro de forma leg√≠vel\npara notifica√ß√µes.\n\nPode ser usado para:\n- Email\n- Slack\n- Discord\n- Logs estruturados"
    },
    {
      "parameters": {
        "jsCode": "// Processar dados com sucesso\nconst items = $input.all();\n\n// Seu processamento aqui\nconst processed = items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      processedAt: new Date().toISOString(),\n      status: 'SUCCESS'\n    }\n  };\n});\n\nreturn processed;"
      },
      "id": "process-success",
      "name": "Processar com Sucesso",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 400],
      "notes": "Processamento normal\nquando n√£o h√° erros."
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "final-status",
              "name": "finalStatus",
              "value": "={{ $node["Verificar se Houve Erro"].item.json.error ? 'FAILED' : 'SUCCESS' }}",
              "type": "string"
            },
            {
              "id": "execution-time",
              "name": "executionTime",
              "value": "={{ new Date().toISOString() }}",
              "type": "string"
            },
            {
              "id": "has-errors",
              "name": "hasErrors",
              "value": "={{ $node["Verificar se Houve Erro"].item.json.error ? true : false }}",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "finalize-execution",
      "name": "Finalizar Execu√ß√£o",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1560, 300],
      "notes": "Ponto final do workflow.\n\nConsolida status final\ne prepara para logging."
    }
  ],
  "connections": {
    "In√≠cio": {
      "main": [
        [
          {
            "node": "Opera√ß√£o Hotmart (Exemplo)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Opera√ß√£o Hotmart (Exemplo)": {
      "main": [
        [
          {
            "node": "Verificar se Houve Erro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar se Houve Erro": {
      "main": [
        [
          {
            "node": "Analisar e Classificar Erro",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Processar com Sucesso",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analisar e Classificar Erro": {
      "main": [
        [
          {
            "node": "Deve Tentar Novamente?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Formatar Mensagem de Erro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deve Tentar Novamente?": {
      "main": [
        [
          {
            "node": "Aguardar 5 Segundos",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Aguardar 5 Segundos": {
      "main": [
        [
          {
            "node": "Opera√ß√£o Hotmart (Exemplo)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatar Mensagem de Erro": {
      "main": [
        [
          {
            "node": "Finalizar Execu√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar com Sucesso": {
      "main": [
        [
          {
            "node": "Finalizar Execu√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "Template robusto para tratamento de erros em opera√ß√µes Hotmart.\n\nCaracter√≠sticas:\n1. **Classifica√ß√£o Inteligente de Erros**\n   - Identifica tipo de erro (Auth, Rate Limit, Server, etc.)\n   - Define severidade (Alta, M√©dia, Baixa)\n   - Determina se deve tentar novamente\n\n2. **An√°lise de Contexto**\n   - Quando ocorreu\n   - Em qual opera√ß√£o\n   - Detalhes t√©cnicos\n\n3. **A√ß√µes Recomendadas**\n   - Sugest√µes espec√≠ficas por tipo de erro\n   - Passos para resolu√ß√£o\n\n4. **Retry Autom√°tico**\n   - Para erros tempor√°rios\n   - Com delay configur√°vel\n   - Evita loops infinitos\n\n5. **Notifica√ß√µes Formatadas**\n   - Mensagens claras\n   - Prontas para Slack/Email\n   - Incluem todas as informa√ß√µes relevantes\n\nComo usar:\n1. Copie este template\n2. Substitua a opera√ß√£o de exemplo\n3. Configure notifica√ß√µes (email, Slack, etc.)\n4. Ajuste tempos de retry conforme necess√°rio\n\nBoas pr√°ticas:\n- Sempre use continueOnFail: true\n- Implemente circuit breaker para falhas repetidas\n- Monitore padr√µes de erro\n- Documente resolu√ß√µes comuns"
  },
  "tags": [
    {
      "name": "Hotmart",
      "createdAt": "2025-05-28T10:00:00.000Z"
    },
    {
      "name": "Template",
      "createdAt": "2025-05-28T10:00:00.000Z"
    },
    {
      "name": "Error Handling",
      "createdAt": "2025-05-28T10:00:00.000Z"
    },
    {
      "name": "Reutiliz√°vel",
      "createdAt": "2025-05-28T10:00:00.000Z"
    }
  ]
}