import type {
  IExecuteFunctions,
  INodeExecutionData,
  INodeParameters,
  INodeType,
  INodeTypeDescription,
} from 'n8n-workflow';
import { NodeOperationError } from 'n8n-workflow';

// Função para configurar os nomes das saídas dinamicamente
const configureOutputNames = (parameters: INodeParameters) => {
  const customizeOutputs = parameters.customizeOutputs as boolean;

  if (customizeOutputs) {
    return [
      {
        type: 'main',
        displayName: parameters.outputName0 || 'Aprovada',
      },
      {
        type: 'main',
        displayName: parameters.outputName1 || 'Completa',
      },
      {
        type: 'main',
        displayName: parameters.outputName2 || 'Cancelada',
      },
      {
        type: 'main',
        displayName: parameters.outputName3 || 'Reembolso',
      },
      {
        type: 'main',
        displayName: parameters.outputName4 || 'Chargeback',
      },
      {
        type: 'main',
        displayName: parameters.outputName5 || 'Boleto',
      },
      {
        type: 'main',
        displayName: parameters.outputName6 || 'Disputa',
      },
      {
        type: 'main',
        displayName: parameters.outputName7 || 'Expirada',
      },
      {
        type: 'main',
        displayName: parameters.outputName8 || 'Atrasada',
      },
      {
        type: 'main',
        displayName: parameters.outputName9 || 'Abandono',
      },
      {
        type: 'main',
        displayName: parameters.outputName10 || 'Ass. Cancelada',
      },
      {
        type: 'main',
        displayName: parameters.outputName11 || 'Troca de Plano',
      },
      {
        type: 'main',
        displayName: parameters.outputName12 || 'Troca de Data',
      },
      {
        type: 'main',
        displayName: parameters.outputName13 || 'Primeiro Acesso',
      },
      {
        type: 'main',
        displayName: parameters.outputName14 || 'Módulo Completo',
      },
    ];
  } else {
    return [
      {
        type: 'main',
        displayName: 'Aprovada',
      },
      {
        type: 'main',
        displayName: 'Completa',
      },
      {
        type: 'main',
        displayName: 'Cancelada',
      },
      {
        type: 'main',
        displayName: 'Reembolso',
      },
      {
        type: 'main',
        displayName: 'Chargeback',
      },
      {
        type: 'main',
        displayName: 'Boleto',
      },
      {
        type: 'main',
        displayName: 'Disputa',
      },
      {
        type: 'main',
        displayName: 'Expirada',
      },
      {
        type: 'main',
        displayName: 'Atrasada',
      },
      {
        type: 'main',
        displayName: 'Abandono',
      },
      {
        type: 'main',
        displayName: 'Ass. Cancelada',
      },
      {
        type: 'main',
        displayName: 'Troca de Plano',
      },
      {
        type: 'main',
        displayName: 'Troca de Data',
      },
      {
        type: 'main',
        displayName: 'Primeiro Acesso',
      },
      {
        type: 'main',
        displayName: 'Módulo Completo',
      },
    ];
  }
};

export class HotmartRouter implements INodeType {
  description: INodeTypeDescription;

  constructor() {
    this.description = {
      displayName: 'Hotmart Router',
      name: 'hotmartRouter',
      icon: 'file:hotmart.svg',
      group: ['transform'],
      version: 1,
      subtitle: 'Direciona eventos Hotmart por tipo',
      description: 'Encaminha eventos da Hotmart para saídas específicas baseado no tipo de evento',
      defaults: {
        name: 'Hotmart Router',
      },
      inputs: ['main'],
      outputs: `={{(${configureOutputNames})($parameter)}}`,
      properties: [
        {
          displayName: 'Campo do Evento',
          name: 'eventField',
          type: 'string',
          default: 'event',
          description: 'Nome do campo contendo o tipo de evento Hotmart',
        },
        {
          displayName: 'Personalizar Nomes das Saídas',
          name: 'customizeOutputs',
          type: 'boolean',
          default: false,
          description: 'Use nomes alternativos mais curtos para as saídas (visual apenas)',
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_APPROVED',
          name: 'outputName0',
          type: 'string',
          default: 'Aprovada',
          description: 'Nome personalizado para a saída de Compra Aprovada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_COMPLETE',
          name: 'outputName1',
          type: 'string',
          default: 'Completa',
          description: 'Nome personalizado para a saída de Compra Completa',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_CANCELED',
          name: 'outputName2',
          type: 'string',
          default: 'Cancelada',
          description: 'Nome personalizado para a saída de Compra Cancelada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_REFUNDED',
          name: 'outputName3',
          type: 'string',
          default: 'Reembolso',
          description: 'Nome personalizado para a saída de Compra Reembolsada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_CHARGEBACK',
          name: 'outputName4',
          type: 'string',
          default: 'Chargeback',
          description: 'Nome personalizado para a saída de Compra com Chargeback',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_BILLET_PRINTED',
          name: 'outputName5',
          type: 'string',
          default: 'Boleto',
          description: 'Nome personalizado para a saída de Boleto Impresso',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_PROTEST',
          name: 'outputName6',
          type: 'string',
          default: 'Disputa',
          description: 'Nome personalizado para a saída de Compra em Disputa',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_EXPIRED',
          name: 'outputName7',
          type: 'string',
          default: 'Expirada',
          description: 'Nome personalizado para a saída de Compra Expirada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_DELAYED',
          name: 'outputName8',
          type: 'string',
          default: 'Atrasada',
          description: 'Nome personalizado para a saída de Compra Atrasada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: PURCHASE_OUT_OF_SHOPPING_CART',
          name: 'outputName9',
          type: 'string',
          default: 'Abandono',
          description: 'Nome personalizado para a saída de Abandono de Carrinho',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: SUBSCRIPTION_CANCELLATION',
          name: 'outputName10',
          type: 'string',
          default: 'Ass. Cancelada',
          description: 'Nome personalizado para a saída de Assinatura Cancelada',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: SWITCH_PLAN',
          name: 'outputName11',
          type: 'string',
          default: 'Troca de Plano',
          description: 'Nome personalizado para a saída de Troca de Plano',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: UPDATE_SUBSCRIPTION_CHARGE_DATE',
          name: 'outputName12',
          type: 'string',
          default: 'Troca de Data',
          description: 'Nome personalizado para a saída de Troca de Data de Cobrança',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: CLUB_FIRST_ACCESS',
          name: 'outputName13',
          type: 'string',
          default: 'Primeiro Acesso',
          description: 'Nome personalizado para a saída de Primeiro Acesso',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
        {
          displayName: 'Nome alternativo para: CLUB_MODULE_COMPLETED',
          name: 'outputName14',
          type: 'string',
          default: 'Módulo Completo',
          description: 'Nome personalizado para a saída de Módulo Completo',
          displayOptions: {
            show: {
              customizeOutputs: [true],
            },
          },
        },
      ],
    };
  }

  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {
    // Criar arrays vazios para cada saída (15 saídas no total)
    const returnData: INodeExecutionData[][] = Array(15).fill(0).map(() => []);

    const items = this.getInputData();
    const eventField = this.getNodeParameter('eventField', 0) as string;

    for (let i = 0; i < items.length; i++) {
      try {
        let event: string | null = null;

        // Obter o valor do evento do campo apropriado
        if (items[i].json && items[i].json[eventField] !== undefined) {
          const eventValue = items[i].json[eventField];
          event = eventValue !== null && eventValue !== undefined ? String(eventValue) : null;
        }

        // Roteamento baseado no tipo de evento
        // Cada evento tem sua própria saída dedicada
        switch (event) {
          case 'PURCHASE_APPROVED':
          case '1': // Compatibilidade com valor numérico
            returnData[0].push(items[i]);
            break;
          case 'PURCHASE_COMPLETE':
            returnData[1].push(items[i]);
            break;
          case 'PURCHASE_CANCELED':
            returnData[2].push(items[i]);
            break;
          case 'PURCHASE_REFUNDED':
            returnData[3].push(items[i]);
            break;
          case 'PURCHASE_CHARGEBACK':
            returnData[4].push(items[i]);
            break;
          case 'PURCHASE_BILLET_PRINTED':
            returnData[5].push(items[i]);
            break;
          case 'PURCHASE_PROTEST':
            returnData[6].push(items[i]);
            break;
          case 'PURCHASE_EXPIRED':
            returnData[7].push(items[i]);
            break;
          case 'PURCHASE_DELAYED':
            returnData[8].push(items[i]);
            break;
          case 'PURCHASE_OUT_OF_SHOPPING_CART':
            returnData[9].push(items[i]);
            break;
          case 'SUBSCRIPTION_CANCELLATION':
            returnData[10].push(items[i]);
            break;
          case 'SWITCH_PLAN':
            returnData[11].push(items[i]);
            break;
          case 'UPDATE_SUBSCRIPTION_CHARGE_DATE':
            returnData[12].push(items[i]);
            break;
          case 'CLUB_FIRST_ACCESS':
            returnData[13].push(items[i]);
            break;
          case 'CLUB_MODULE_COMPLETED':
            returnData[14].push(items[i]);
            break;
          default:
            // Se for um evento não mapeado, não enviamos para nenhuma saída
            console.log(`[HotmartRouter] Evento não reconhecido: ${event}`);
            break;
        }
      } catch (error) {
        if (this.continueOnFail()) {
          console.error(`[HotmartRouter] Erro ao processar item ${i}: ${error.message}`);
          continue;
        }
        throw new NodeOperationError(this.getNode(), error, {
          itemIndex: i,
        });
      }
    }

    return returnData;
  }
}